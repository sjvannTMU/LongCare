using  System;
using  System.Collections.Generic;
using  System.Linq.Expressions;
using  System.Web;
using  Umbraco.Core.Models;
using  Umbraco.Core.Models.PublishedContent;
using  Umbraco.Web;
using  Umbraco.ModelsBuilder;
using  Umbraco.ModelsBuilder.Umbraco;
[assembly: PureLiveAssembly]
[assembly:ModelsBuilderAssembly(PureLive = true, SourceHash = "3862f938a54b8208")]
[assembly:System.Reflection.AssemblyVersion("0.0.0.1")]


// FILE: models.generated.cs

//------------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//    Umbraco.ModelsBuilder v3.0.10.102
//
//   Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------















namespace Umbraco.Web.PublishedContentModels
{
	// Mixin content Type 1072 with alias "articleControls"
	/// <summary>Article Controls</summary>
	public partial interface IArticleControls : IPublishedContent
	{
		/// <summary>Article Date</summary>
		DateTime ArticleDate { get; }

		/// <summary>Author Name</summary>
		string AuthorName { get; }
	}

	/// <summary>Article Controls</summary>
	[PublishedContentModel("articleControls")]
	public partial class ArticleControls : PublishedContentModel, IArticleControls
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "articleControls";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public ArticleControls(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ArticleControls, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Article Date: Choose a date for this article
		///</summary>
		[ImplementPropertyType("articleDate")]
		public DateTime ArticleDate
		{
			get { return GetArticleDate(this); }
		}

		/// <summary>Static getter for Article Date</summary>
		public static DateTime GetArticleDate(IArticleControls that) { return that.GetPropertyValue<DateTime>("articleDate"); }

		///<summary>
		/// Author Name: Enter a name for the author
		///</summary>
		[ImplementPropertyType("authorName")]
		public string AuthorName
		{
			get { return GetAuthorName(this); }
		}

		/// <summary>Static getter for Author Name</summary>
		public static string GetAuthorName(IArticleControls that) { return that.GetPropertyValue<string>("authorName"); }
	}

	// Mixin content Type 1073 with alias "carouselControls"
	/// <summary>Carousel Controls</summary>
	public partial interface ICarouselControls : IPublishedContent
	{
		/// <summary>Main Carousel</summary>
		IEnumerable<IPublishedContent> MainCarousel { get; }
	}

	/// <summary>Carousel Controls</summary>
	[PublishedContentModel("carouselControls")]
	public partial class CarouselControls : PublishedContentModel, ICarouselControls
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "carouselControls";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public CarouselControls(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<CarouselControls, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Main Carousel: Add the items for the carousel
		///</summary>
		[ImplementPropertyType("mainCarousel")]
		public IEnumerable<IPublishedContent> MainCarousel
		{
			get { return GetMainCarousel(this); }
		}

		/// <summary>Static getter for Main Carousel</summary>
		public static IEnumerable<IPublishedContent> GetMainCarousel(ICarouselControls that) { return that.GetPropertyValue<IEnumerable<IPublishedContent>>("mainCarousel"); }
	}

	// Mixin content Type 1074 with alias "contentControls"
	/// <summary>Content Controls</summary>
	public partial interface IContentControls : IPublishedContent
	{
		/// <summary>Content Grid</summary>
		Newtonsoft.Json.Linq.JToken ContentGrid { get; }

		/// <summary>Main Image</summary>
		IPublishedContent MainImage { get; }

		/// <summary>Title</summary>
		string Title { get; }
	}

	/// <summary>Content Controls</summary>
	[PublishedContentModel("contentControls")]
	public partial class ContentControls : PublishedContentModel, IContentControls
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "contentControls";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public ContentControls(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ContentControls, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Content Grid: Enter the content for the grid
		///</summary>
		[ImplementPropertyType("contentGrid")]
		public Newtonsoft.Json.Linq.JToken ContentGrid
		{
			get { return GetContentGrid(this); }
		}

		/// <summary>Static getter for Content Grid</summary>
		public static Newtonsoft.Json.Linq.JToken GetContentGrid(IContentControls that) { return that.GetPropertyValue<Newtonsoft.Json.Linq.JToken>("contentGrid"); }

		///<summary>
		/// Main Image: Choose an image to show as the main image on this page
		///</summary>
		[ImplementPropertyType("mainImage")]
		public IPublishedContent MainImage
		{
			get { return GetMainImage(this); }
		}

		/// <summary>Static getter for Main Image</summary>
		public static IPublishedContent GetMainImage(IContentControls that) { return that.GetPropertyValue<IPublishedContent>("mainImage"); }

		///<summary>
		/// Title: Enter the title for this page. If you leave this blank, we will use the page name.
		///</summary>
		[ImplementPropertyType("title")]
		public string Title
		{
			get { return GetTitle(this); }
		}

		/// <summary>Static getter for Title</summary>
		public static string GetTitle(IContentControls that) { return that.GetPropertyValue<string>("title"); }
	}

	// Mixin content Type 1075 with alias "disableControls"
	/// <summary>Disable Controls</summary>
	public partial interface IDisableControls : IPublishedContent
	{
		/// <summary>Disabled</summary>
		bool UmbracoNaviHide { get; }
	}

	/// <summary>Disable Controls</summary>
	[PublishedContentModel("disableControls")]
	public partial class DisableControls : PublishedContentModel, IDisableControls
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "disableControls";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public DisableControls(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<DisableControls, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Disabled: Tick this box if you want to disable/hide this item
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return GetUmbracoNaviHide(this); }
		}

		/// <summary>Static getter for Disabled</summary>
		public static bool GetUmbracoNaviHide(IDisableControls that) { return that.GetPropertyValue<bool>("umbracoNaviHide"); }
	}

	// Mixin content Type 1076 with alias "footerContentControls"
	/// <summary>Footer Content Controls</summary>
	public partial interface IFooterContentControls : IPublishedContent
	{
		/// <summary>Footer Links</summary>
		Umbraco.Web.Models.RelatedLinks FooterLinks { get; }

		/// <summary>Footer Social Links</summary>
		Umbraco.Web.Models.RelatedLinks FooterSocialLinks { get; }

		/// <summary>Footer Title</summary>
		string FooterTitle { get; }
	}

	/// <summary>Footer Content Controls</summary>
	[PublishedContentModel("footerContentControls")]
	public partial class FooterContentControls : PublishedContentModel, IFooterContentControls
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "footerContentControls";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public FooterContentControls(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<FooterContentControls, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Footer Links: Enter the footer links
		///</summary>
		[ImplementPropertyType("footerLinks")]
		public Umbraco.Web.Models.RelatedLinks FooterLinks
		{
			get { return GetFooterLinks(this); }
		}

		/// <summary>Static getter for Footer Links</summary>
		public static Umbraco.Web.Models.RelatedLinks GetFooterLinks(IFooterContentControls that) { return that.GetPropertyValue<Umbraco.Web.Models.RelatedLinks>("footerLinks"); }

		///<summary>
		/// Footer Social Links: Enter the social links to show in the footer
		///</summary>
		[ImplementPropertyType("footerSocialLinks")]
		public Umbraco.Web.Models.RelatedLinks FooterSocialLinks
		{
			get { return GetFooterSocialLinks(this); }
		}

		/// <summary>Static getter for Footer Social Links</summary>
		public static Umbraco.Web.Models.RelatedLinks GetFooterSocialLinks(IFooterContentControls that) { return that.GetPropertyValue<Umbraco.Web.Models.RelatedLinks>("footerSocialLinks"); }

		///<summary>
		/// Footer Title: Enter a title for the footer content
		///</summary>
		[ImplementPropertyType("footerTitle")]
		public string FooterTitle
		{
			get { return GetFooterTitle(this); }
		}

		/// <summary>Static getter for Footer Title</summary>
		public static string GetFooterTitle(IFooterContentControls that) { return that.GetPropertyValue<string>("footerTitle"); }
	}

	// Mixin content Type 1077 with alias "latestArticlesControls"
	/// <summary>Latest Articles Controls</summary>
	public partial interface ILatestArticlesControls : IPublishedContent
	{
		/// <summary>Latest Articles Subtitle</summary>
		string LatestArticlesSubtitle { get; }

		/// <summary>Latest Articles Title</summary>
		string LatestArticlesTitle { get; }
	}

	/// <summary>Latest Articles Controls</summary>
	[PublishedContentModel("latestArticlesControls")]
	public partial class LatestArticlesControls : PublishedContentModel, ILatestArticlesControls
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "latestArticlesControls";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public LatestArticlesControls(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<LatestArticlesControls, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Latest Articles Subtitle: Enter the subtitle for the latest articles
		///</summary>
		[ImplementPropertyType("latestArticlesSubtitle")]
		public string LatestArticlesSubtitle
		{
			get { return GetLatestArticlesSubtitle(this); }
		}

		/// <summary>Static getter for Latest Articles Subtitle</summary>
		public static string GetLatestArticlesSubtitle(ILatestArticlesControls that) { return that.GetPropertyValue<string>("latestArticlesSubtitle"); }

		///<summary>
		/// Latest Articles Title: Enter a title for the latest articles
		///</summary>
		[ImplementPropertyType("latestArticlesTitle")]
		public string LatestArticlesTitle
		{
			get { return GetLatestArticlesTitle(this); }
		}

		/// <summary>Static getter for Latest Articles Title</summary>
		public static string GetLatestArticlesTitle(ILatestArticlesControls that) { return that.GetPropertyValue<string>("latestArticlesTitle"); }
	}

	// Mixin content Type 1078 with alias "metaDataControls"
	/// <summary>Meta Data Controls</summary>
	public partial interface IMetaDataControls : IPublishedContent
	{
		/// <summary>Meta Description</summary>
		string MetaDescription { get; }

		/// <summary>Meta Keywords</summary>
		IEnumerable<string> MetaKeywords { get; }

		/// <summary>Meta Name</summary>
		string MetaName { get; }
	}

	/// <summary>Meta Data Controls</summary>
	[PublishedContentModel("metaDataControls")]
	public partial class MetaDataControls : PublishedContentModel, IMetaDataControls
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "metaDataControls";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public MetaDataControls(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<MetaDataControls, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Meta Description: Enter the meta description. This is what shows up in Google etc. If left blank, will use the page name.
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return GetMetaDescription(this); }
		}

		/// <summary>Static getter for Meta Description</summary>
		public static string GetMetaDescription(IMetaDataControls that) { return that.GetPropertyValue<string>("metaDescription"); }

		///<summary>
		/// Meta Keywords: Enter the meta keywords. This is used for Search Engine
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public IEnumerable<string> MetaKeywords
		{
			get { return GetMetaKeywords(this); }
		}

		/// <summary>Static getter for Meta Keywords</summary>
		public static IEnumerable<string> GetMetaKeywords(IMetaDataControls that) { return that.GetPropertyValue<IEnumerable<string>>("metaKeywords"); }

		///<summary>
		/// Meta Name: Enter the meta name. If left blank it will use the page name.
		///</summary>
		[ImplementPropertyType("metaName")]
		public string MetaName
		{
			get { return GetMetaName(this); }
		}

		/// <summary>Static getter for Meta Name</summary>
		public static string GetMetaName(IMetaDataControls that) { return that.GetPropertyValue<string>("metaName"); }
	}

	// Mixin content Type 1079 with alias "navigationControls"
	/// <summary>Navigation Controls</summary>
	public partial interface INavigationControls : IPublishedContent
	{
		/// <summary>Disable Dropdown</summary>
		bool DisableDropdown { get; }

		/// <summary>Text Only In Navigation</summary>
		bool TextOnlyInNavigation { get; }

		/// <summary>Umbraco Navi Hide</summary>
		bool UmbracoNaviHide { get; }
	}

	/// <summary>Navigation Controls</summary>
	[PublishedContentModel("navigationControls")]
	public partial class NavigationControls : PublishedContentModel, INavigationControls
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "navigationControls";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public NavigationControls(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<NavigationControls, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Disable Dropdown: Tick this box if you want to disable the dropdown for this item
		///</summary>
		[ImplementPropertyType("disableDropdown")]
		public bool DisableDropdown
		{
			get { return GetDisableDropdown(this); }
		}

		/// <summary>Static getter for Disable Dropdown</summary>
		public static bool GetDisableDropdown(INavigationControls that) { return that.GetPropertyValue<bool>("disableDropdown"); }

		///<summary>
		/// Text Only In Navigation: Tick this box if you want this item to be just text only in the navigation menu.
		///</summary>
		[ImplementPropertyType("textOnlyInNavigation")]
		public bool TextOnlyInNavigation
		{
			get { return GetTextOnlyInNavigation(this); }
		}

		/// <summary>Static getter for Text Only In Navigation</summary>
		public static bool GetTextOnlyInNavigation(INavigationControls that) { return that.GetPropertyValue<bool>("textOnlyInNavigation"); }

		///<summary>
		/// Umbraco Navi Hide: Tick this box if you want to hide it from the site.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return GetUmbracoNaviHide(this); }
		}

		/// <summary>Static getter for Umbraco Navi Hide</summary>
		public static bool GetUmbracoNaviHide(INavigationControls that) { return that.GetPropertyValue<bool>("umbracoNaviHide"); }
	}

	// Mixin content Type 1080 with alias "prettyLinkControls"
	/// <summary>Pretty Link Controls</summary>
	public partial interface IPrettyLinkControls : IPublishedContent
	{
		/// <summary>Link Target</summary>
		Umbraco.Web.Models.RelatedLinks LinkTarget { get; }
	}

	/// <summary>Pretty Link Controls</summary>
	[PublishedContentModel("prettyLinkControls")]
	public partial class PrettyLinkControls : PublishedContentModel, IPrettyLinkControls
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "prettyLinkControls";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public PrettyLinkControls(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<PrettyLinkControls, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Link Target: Enter the link for this pretty link to point to
		///</summary>
		[ImplementPropertyType("linkTarget")]
		public Umbraco.Web.Models.RelatedLinks LinkTarget
		{
			get { return GetLinkTarget(this); }
		}

		/// <summary>Static getter for Link Target</summary>
		public static Umbraco.Web.Models.RelatedLinks GetLinkTarget(IPrettyLinkControls that) { return that.GetPropertyValue<Umbraco.Web.Models.RelatedLinks>("linkTarget"); }
	}

	/// <summary>Search</summary>
	[PublishedContentModel("search")]
	public partial class Search : PublishedContentModel, IMetaDataControls, INavigationControls
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "search";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Search(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Search, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Meta Description: Enter the meta description. This is what shows up in Google etc. If left blank, will use the page name.
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return Umbraco.Web.PublishedContentModels.MetaDataControls.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords: Enter the meta keywords. This is used for Search Engine
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public IEnumerable<string> MetaKeywords
		{
			get { return Umbraco.Web.PublishedContentModels.MetaDataControls.GetMetaKeywords(this); }
		}

		///<summary>
		/// Meta Name: Enter the meta name. If left blank it will use the page name.
		///</summary>
		[ImplementPropertyType("metaName")]
		public string MetaName
		{
			get { return Umbraco.Web.PublishedContentModels.MetaDataControls.GetMetaName(this); }
		}

		///<summary>
		/// Disable Dropdown: Tick this box if you want to disable the dropdown for this item
		///</summary>
		[ImplementPropertyType("disableDropdown")]
		public bool DisableDropdown
		{
			get { return Umbraco.Web.PublishedContentModels.NavigationControls.GetDisableDropdown(this); }
		}

		///<summary>
		/// Text Only In Navigation: Tick this box if you want this item to be just text only in the navigation menu.
		///</summary>
		[ImplementPropertyType("textOnlyInNavigation")]
		public bool TextOnlyInNavigation
		{
			get { return Umbraco.Web.PublishedContentModels.NavigationControls.GetTextOnlyInNavigation(this); }
		}

		///<summary>
		/// Umbraco Navi Hide: Tick this box if you want to hide it from the site.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.NavigationControls.GetUmbracoNaviHide(this); }
		}
	}

	// Mixin content Type 1082 with alias "slideImageControls"
	/// <summary>Slide Image Controls</summary>
	public partial interface ISlideImageControls : IPublishedContent
	{
		/// <summary>Slide Image</summary>
		IPublishedContent SlideImage { get; }
	}

	/// <summary>Slide Image Controls</summary>
	[PublishedContentModel("slideImageControls")]
	public partial class SlideImageControls : PublishedContentModel, ISlideImageControls
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "slideImageControls";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public SlideImageControls(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SlideImageControls, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Slide Image: Add an image for the slide
		///</summary>
		[ImplementPropertyType("slideImage")]
		public IPublishedContent SlideImage
		{
			get { return GetSlideImage(this); }
		}

		/// <summary>Static getter for Slide Image</summary>
		public static IPublishedContent GetSlideImage(ISlideImageControls that) { return that.GetPropertyValue<IPublishedContent>("slideImage"); }
	}

	// Mixin content Type 1083 with alias "slideLinkControls"
	/// <summary>Slide Link Controls</summary>
	public partial interface ISlideLinkControls : IPublishedContent
	{
		/// <summary>Slide Link</summary>
		Umbraco.Web.Models.RelatedLinks SlideLink { get; }
	}

	/// <summary>Slide Link Controls</summary>
	[PublishedContentModel("slideLinkControls")]
	public partial class SlideLinkControls : PublishedContentModel, ISlideLinkControls
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "slideLinkControls";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public SlideLinkControls(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SlideLinkControls, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Slide Link: Add a link for this slide to link to
		///</summary>
		[ImplementPropertyType("slideLink")]
		public Umbraco.Web.Models.RelatedLinks SlideLink
		{
			get { return GetSlideLink(this); }
		}

		/// <summary>Static getter for Slide Link</summary>
		public static Umbraco.Web.Models.RelatedLinks GetSlideLink(ISlideLinkControls that) { return that.GetPropertyValue<Umbraco.Web.Models.RelatedLinks>("slideLink"); }
	}

	// Mixin content Type 1084 with alias "slideSubtitleControls"
	/// <summary>Slide Subtitle Controls</summary>
	public partial interface ISlideSubtitleControls : IPublishedContent
	{
		/// <summary>Slide Subtitle</summary>
		string SlideSubtitle { get; }
	}

	/// <summary>Slide Subtitle Controls</summary>
	[PublishedContentModel("slideSubtitleControls")]
	public partial class SlideSubtitleControls : PublishedContentModel, ISlideSubtitleControls
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "slideSubtitleControls";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public SlideSubtitleControls(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SlideSubtitleControls, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Slide Subtitle: Enter the subtitle for this slide
		///</summary>
		[ImplementPropertyType("slideSubtitle")]
		public string SlideSubtitle
		{
			get { return GetSlideSubtitle(this); }
		}

		/// <summary>Static getter for Slide Subtitle</summary>
		public static string GetSlideSubtitle(ISlideSubtitleControls that) { return that.GetPropertyValue<string>("slideSubtitle"); }
	}

	// Mixin content Type 1085 with alias "slideTitleControls"
	/// <summary>Slide Title Controls</summary>
	public partial interface ISlideTitleControls : IPublishedContent
	{
		/// <summary>Slide Title</summary>
		string SlideTitle { get; }
	}

	/// <summary>Slide Title Controls</summary>
	[PublishedContentModel("slideTitleControls")]
	public partial class SlideTitleControls : PublishedContentModel, ISlideTitleControls
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "slideTitleControls";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public SlideTitleControls(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SlideTitleControls, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Slide Title: Enter the title for this slide
		///</summary>
		[ImplementPropertyType("slideTitle")]
		public string SlideTitle
		{
			get { return GetSlideTitle(this); }
		}

		/// <summary>Static getter for Slide Title</summary>
		public static string GetSlideTitle(ISlideTitleControls that) { return that.GetPropertyValue<string>("slideTitle"); }
	}

	/// <summary>Carousel Slide</summary>
	[PublishedContentModel("carouselSlide")]
	public partial class CarouselSlide : PublishedContentModel, IDisableControls, ISlideImageControls, ISlideLinkControls, ISlideSubtitleControls, ISlideTitleControls
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "carouselSlide";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public CarouselSlide(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<CarouselSlide, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Disabled: Tick this box if you want to disable/hide this item
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.DisableControls.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Slide Image: Add an image for the slide
		///</summary>
		[ImplementPropertyType("slideImage")]
		public IPublishedContent SlideImage
		{
			get { return Umbraco.Web.PublishedContentModels.SlideImageControls.GetSlideImage(this); }
		}

		///<summary>
		/// Slide Link: Add a link for this slide to link to
		///</summary>
		[ImplementPropertyType("slideLink")]
		public Umbraco.Web.Models.RelatedLinks SlideLink
		{
			get { return Umbraco.Web.PublishedContentModels.SlideLinkControls.GetSlideLink(this); }
		}

		///<summary>
		/// Slide Subtitle: Enter the subtitle for this slide
		///</summary>
		[ImplementPropertyType("slideSubtitle")]
		public string SlideSubtitle
		{
			get { return Umbraco.Web.PublishedContentModels.SlideSubtitleControls.GetSlideSubtitle(this); }
		}

		///<summary>
		/// Slide Title: Enter the title for this slide
		///</summary>
		[ImplementPropertyType("slideTitle")]
		public string SlideTitle
		{
			get { return Umbraco.Web.PublishedContentModels.SlideTitleControls.GetSlideTitle(this); }
		}
	}

	// Mixin content Type 1087 with alias "umbracoUrlAliasControls"
	/// <summary>Umbraco Url Alias Controls</summary>
	public partial interface IUmbracoUrlAliasControls : IPublishedContent
	{
		/// <summary>Umbraco Url Alias</summary>
		string UmbracoUrlAlias { get; }
	}

	/// <summary>Umbraco Url Alias Controls</summary>
	[PublishedContentModel("umbracoUrlAliasControls")]
	public partial class UmbracoUrlAliasControls : PublishedContentModel, IUmbracoUrlAliasControls
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "umbracoUrlAliasControls";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public UmbracoUrlAliasControls(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<UmbracoUrlAliasControls, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Umbraco Url Alias: Enter an alternate url in here. Please note that the values you use must be lowercase, not use a leading slash and not use a trailing ".aspx" or trailing slash. If you are adding multiple values, they must be separated with a comma.
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return GetUmbracoUrlAlias(this); }
		}

		/// <summary>Static getter for Umbraco Url Alias</summary>
		public static string GetUmbracoUrlAlias(IUmbracoUrlAliasControls that) { return that.GetPropertyValue<string>("umbracoUrlAlias"); }
	}

	/// <summary>Article</summary>
	[PublishedContentModel("article")]
	public partial class Article : PublishedContentModel, IArticleControls, IContentControls, IMetaDataControls, INavigationControls, IUmbracoUrlAliasControls
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "article";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Article(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Article, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Article Date: Choose a date for this article
		///</summary>
		[ImplementPropertyType("articleDate")]
		public DateTime ArticleDate
		{
			get { return Umbraco.Web.PublishedContentModels.ArticleControls.GetArticleDate(this); }
		}

		///<summary>
		/// Author Name: Enter a name for the author
		///</summary>
		[ImplementPropertyType("authorName")]
		public string AuthorName
		{
			get { return Umbraco.Web.PublishedContentModels.ArticleControls.GetAuthorName(this); }
		}

		///<summary>
		/// Content Grid: Enter the content for the grid
		///</summary>
		[ImplementPropertyType("contentGrid")]
		public Newtonsoft.Json.Linq.JToken ContentGrid
		{
			get { return Umbraco.Web.PublishedContentModels.ContentControls.GetContentGrid(this); }
		}

		///<summary>
		/// Main Image: Choose an image to show as the main image on this page
		///</summary>
		[ImplementPropertyType("mainImage")]
		public IPublishedContent MainImage
		{
			get { return Umbraco.Web.PublishedContentModels.ContentControls.GetMainImage(this); }
		}

		///<summary>
		/// Title: Enter the title for this page. If you leave this blank, we will use the page name.
		///</summary>
		[ImplementPropertyType("title")]
		public string Title
		{
			get { return Umbraco.Web.PublishedContentModels.ContentControls.GetTitle(this); }
		}

		///<summary>
		/// Meta Description: Enter the meta description. This is what shows up in Google etc. If left blank, will use the page name.
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return Umbraco.Web.PublishedContentModels.MetaDataControls.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords: Enter the meta keywords. This is used for Search Engine
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public IEnumerable<string> MetaKeywords
		{
			get { return Umbraco.Web.PublishedContentModels.MetaDataControls.GetMetaKeywords(this); }
		}

		///<summary>
		/// Meta Name: Enter the meta name. If left blank it will use the page name.
		///</summary>
		[ImplementPropertyType("metaName")]
		public string MetaName
		{
			get { return Umbraco.Web.PublishedContentModels.MetaDataControls.GetMetaName(this); }
		}

		///<summary>
		/// Disable Dropdown: Tick this box if you want to disable the dropdown for this item
		///</summary>
		[ImplementPropertyType("disableDropdown")]
		public bool DisableDropdown
		{
			get { return Umbraco.Web.PublishedContentModels.NavigationControls.GetDisableDropdown(this); }
		}

		///<summary>
		/// Text Only In Navigation: Tick this box if you want this item to be just text only in the navigation menu.
		///</summary>
		[ImplementPropertyType("textOnlyInNavigation")]
		public bool TextOnlyInNavigation
		{
			get { return Umbraco.Web.PublishedContentModels.NavigationControls.GetTextOnlyInNavigation(this); }
		}

		///<summary>
		/// Umbraco Navi Hide: Tick this box if you want to hide it from the site.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.NavigationControls.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Umbraco Url Alias: Enter an alternate url in here. Please note that the values you use must be lowercase, not use a leading slash and not use a trailing ".aspx" or trailing slash. If you are adding multiple values, they must be separated with a comma.
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.UmbracoUrlAliasControls.GetUmbracoUrlAlias(this); }
		}
	}

	/// <summary>Article List</summary>
	[PublishedContentModel("articleList")]
	public partial class ArticleList : PublishedContentModel, IMetaDataControls, INavigationControls, IUmbracoUrlAliasControls
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "articleList";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public ArticleList(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ArticleList, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Meta Description: Enter the meta description. This is what shows up in Google etc. If left blank, will use the page name.
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return Umbraco.Web.PublishedContentModels.MetaDataControls.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords: Enter the meta keywords. This is used for Search Engine
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public IEnumerable<string> MetaKeywords
		{
			get { return Umbraco.Web.PublishedContentModels.MetaDataControls.GetMetaKeywords(this); }
		}

		///<summary>
		/// Meta Name: Enter the meta name. If left blank it will use the page name.
		///</summary>
		[ImplementPropertyType("metaName")]
		public string MetaName
		{
			get { return Umbraco.Web.PublishedContentModels.MetaDataControls.GetMetaName(this); }
		}

		///<summary>
		/// Disable Dropdown: Tick this box if you want to disable the dropdown for this item
		///</summary>
		[ImplementPropertyType("disableDropdown")]
		public bool DisableDropdown
		{
			get { return Umbraco.Web.PublishedContentModels.NavigationControls.GetDisableDropdown(this); }
		}

		///<summary>
		/// Text Only In Navigation: Tick this box if you want this item to be just text only in the navigation menu.
		///</summary>
		[ImplementPropertyType("textOnlyInNavigation")]
		public bool TextOnlyInNavigation
		{
			get { return Umbraco.Web.PublishedContentModels.NavigationControls.GetTextOnlyInNavigation(this); }
		}

		///<summary>
		/// Umbraco Navi Hide: Tick this box if you want to hide it from the site.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.NavigationControls.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Umbraco Url Alias: Enter an alternate url in here. Please note that the values you use must be lowercase, not use a leading slash and not use a trailing ".aspx" or trailing slash. If you are adding multiple values, they must be separated with a comma.
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.UmbracoUrlAliasControls.GetUmbracoUrlAlias(this); }
		}
	}

	/// <summary>Contact</summary>
	[PublishedContentModel("contact")]
	public partial class Contact : PublishedContentModel, IMetaDataControls, INavigationControls, IUmbracoUrlAliasControls
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "contact";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Contact(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Contact, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Meta Description: Enter the meta description. This is what shows up in Google etc. If left blank, will use the page name.
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return Umbraco.Web.PublishedContentModels.MetaDataControls.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords: Enter the meta keywords. This is used for Search Engine
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public IEnumerable<string> MetaKeywords
		{
			get { return Umbraco.Web.PublishedContentModels.MetaDataControls.GetMetaKeywords(this); }
		}

		///<summary>
		/// Meta Name: Enter the meta name. If left blank it will use the page name.
		///</summary>
		[ImplementPropertyType("metaName")]
		public string MetaName
		{
			get { return Umbraco.Web.PublishedContentModels.MetaDataControls.GetMetaName(this); }
		}

		///<summary>
		/// Disable Dropdown: Tick this box if you want to disable the dropdown for this item
		///</summary>
		[ImplementPropertyType("disableDropdown")]
		public bool DisableDropdown
		{
			get { return Umbraco.Web.PublishedContentModels.NavigationControls.GetDisableDropdown(this); }
		}

		///<summary>
		/// Text Only In Navigation: Tick this box if you want this item to be just text only in the navigation menu.
		///</summary>
		[ImplementPropertyType("textOnlyInNavigation")]
		public bool TextOnlyInNavigation
		{
			get { return Umbraco.Web.PublishedContentModels.NavigationControls.GetTextOnlyInNavigation(this); }
		}

		///<summary>
		/// Umbraco Navi Hide: Tick this box if you want to hide it from the site.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.NavigationControls.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Umbraco Url Alias: Enter an alternate url in here. Please note that the values you use must be lowercase, not use a leading slash and not use a trailing ".aspx" or trailing slash. If you are adding multiple values, they must be separated with a comma.
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.UmbracoUrlAliasControls.GetUmbracoUrlAlias(this); }
		}
	}

	/// <summary>Content</summary>
	[PublishedContentModel("content")]
	public partial class Content : PublishedContentModel, IContentControls, IMetaDataControls, INavigationControls, IUmbracoUrlAliasControls
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "content";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Content(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Content, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Content Grid: Enter the content for the grid
		///</summary>
		[ImplementPropertyType("contentGrid")]
		public Newtonsoft.Json.Linq.JToken ContentGrid
		{
			get { return Umbraco.Web.PublishedContentModels.ContentControls.GetContentGrid(this); }
		}

		///<summary>
		/// Main Image: Choose an image to show as the main image on this page
		///</summary>
		[ImplementPropertyType("mainImage")]
		public IPublishedContent MainImage
		{
			get { return Umbraco.Web.PublishedContentModels.ContentControls.GetMainImage(this); }
		}

		///<summary>
		/// Title: Enter the title for this page. If you leave this blank, we will use the page name.
		///</summary>
		[ImplementPropertyType("title")]
		public string Title
		{
			get { return Umbraco.Web.PublishedContentModels.ContentControls.GetTitle(this); }
		}

		///<summary>
		/// Meta Description: Enter the meta description. This is what shows up in Google etc. If left blank, will use the page name.
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return Umbraco.Web.PublishedContentModels.MetaDataControls.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords: Enter the meta keywords. This is used for Search Engine
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public IEnumerable<string> MetaKeywords
		{
			get { return Umbraco.Web.PublishedContentModels.MetaDataControls.GetMetaKeywords(this); }
		}

		///<summary>
		/// Meta Name: Enter the meta name. If left blank it will use the page name.
		///</summary>
		[ImplementPropertyType("metaName")]
		public string MetaName
		{
			get { return Umbraco.Web.PublishedContentModels.MetaDataControls.GetMetaName(this); }
		}

		///<summary>
		/// Disable Dropdown: Tick this box if you want to disable the dropdown for this item
		///</summary>
		[ImplementPropertyType("disableDropdown")]
		public bool DisableDropdown
		{
			get { return Umbraco.Web.PublishedContentModels.NavigationControls.GetDisableDropdown(this); }
		}

		///<summary>
		/// Text Only In Navigation: Tick this box if you want this item to be just text only in the navigation menu.
		///</summary>
		[ImplementPropertyType("textOnlyInNavigation")]
		public bool TextOnlyInNavigation
		{
			get { return Umbraco.Web.PublishedContentModels.NavigationControls.GetTextOnlyInNavigation(this); }
		}

		///<summary>
		/// Umbraco Navi Hide: Tick this box if you want to hide it from the site.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.NavigationControls.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Umbraco Url Alias: Enter an alternate url in here. Please note that the values you use must be lowercase, not use a leading slash and not use a trailing ".aspx" or trailing slash. If you are adding multiple values, they must be separated with a comma.
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.UmbracoUrlAliasControls.GetUmbracoUrlAlias(this); }
		}
	}

	/// <summary>Home</summary>
	[PublishedContentModel("home")]
	public partial class Home : PublishedContentModel, ICarouselControls, IFooterContentControls, ILatestArticlesControls, IMetaDataControls, INavigationControls, IUmbracoUrlAliasControls
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "home";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Home(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Home, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Main Carousel: Add the items for the carousel
		///</summary>
		[ImplementPropertyType("mainCarousel")]
		public IEnumerable<IPublishedContent> MainCarousel
		{
			get { return Umbraco.Web.PublishedContentModels.CarouselControls.GetMainCarousel(this); }
		}

		///<summary>
		/// Footer Links: Enter the footer links
		///</summary>
		[ImplementPropertyType("footerLinks")]
		public Umbraco.Web.Models.RelatedLinks FooterLinks
		{
			get { return Umbraco.Web.PublishedContentModels.FooterContentControls.GetFooterLinks(this); }
		}

		///<summary>
		/// Footer Social Links: Enter the social links to show in the footer
		///</summary>
		[ImplementPropertyType("footerSocialLinks")]
		public Umbraco.Web.Models.RelatedLinks FooterSocialLinks
		{
			get { return Umbraco.Web.PublishedContentModels.FooterContentControls.GetFooterSocialLinks(this); }
		}

		///<summary>
		/// Footer Title: Enter a title for the footer content
		///</summary>
		[ImplementPropertyType("footerTitle")]
		public string FooterTitle
		{
			get { return Umbraco.Web.PublishedContentModels.FooterContentControls.GetFooterTitle(this); }
		}

		///<summary>
		/// Latest Articles Subtitle: Enter the subtitle for the latest articles
		///</summary>
		[ImplementPropertyType("latestArticlesSubtitle")]
		public string LatestArticlesSubtitle
		{
			get { return Umbraco.Web.PublishedContentModels.LatestArticlesControls.GetLatestArticlesSubtitle(this); }
		}

		///<summary>
		/// Latest Articles Title: Enter a title for the latest articles
		///</summary>
		[ImplementPropertyType("latestArticlesTitle")]
		public string LatestArticlesTitle
		{
			get { return Umbraco.Web.PublishedContentModels.LatestArticlesControls.GetLatestArticlesTitle(this); }
		}

		///<summary>
		/// Meta Description: Enter the meta description. This is what shows up in Google etc. If left blank, will use the page name.
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return Umbraco.Web.PublishedContentModels.MetaDataControls.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords: Enter the meta keywords. This is used for Search Engine
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public IEnumerable<string> MetaKeywords
		{
			get { return Umbraco.Web.PublishedContentModels.MetaDataControls.GetMetaKeywords(this); }
		}

		///<summary>
		/// Meta Name: Enter the meta name. If left blank it will use the page name.
		///</summary>
		[ImplementPropertyType("metaName")]
		public string MetaName
		{
			get { return Umbraco.Web.PublishedContentModels.MetaDataControls.GetMetaName(this); }
		}

		///<summary>
		/// Disable Dropdown: Tick this box if you want to disable the dropdown for this item
		///</summary>
		[ImplementPropertyType("disableDropdown")]
		public bool DisableDropdown
		{
			get { return Umbraco.Web.PublishedContentModels.NavigationControls.GetDisableDropdown(this); }
		}

		///<summary>
		/// Text Only In Navigation: Tick this box if you want this item to be just text only in the navigation menu.
		///</summary>
		[ImplementPropertyType("textOnlyInNavigation")]
		public bool TextOnlyInNavigation
		{
			get { return Umbraco.Web.PublishedContentModels.NavigationControls.GetTextOnlyInNavigation(this); }
		}

		///<summary>
		/// Umbraco Navi Hide: Tick this box if you want to hide it from the site.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.NavigationControls.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Umbraco Url Alias: Enter an alternate url in here. Please note that the values you use must be lowercase, not use a leading slash and not use a trailing ".aspx" or trailing slash. If you are adding multiple values, they must be separated with a comma.
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.UmbracoUrlAliasControls.GetUmbracoUrlAlias(this); }
		}
	}

	/// <summary>Pretty Link</summary>
	[PublishedContentModel("prettyLink")]
	public partial class PrettyLink : PublishedContentModel, INavigationControls, IPrettyLinkControls, IUmbracoUrlAliasControls
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "prettyLink";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public PrettyLink(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<PrettyLink, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Disable Dropdown: Tick this box if you want to disable the dropdown for this item
		///</summary>
		[ImplementPropertyType("disableDropdown")]
		public bool DisableDropdown
		{
			get { return Umbraco.Web.PublishedContentModels.NavigationControls.GetDisableDropdown(this); }
		}

		///<summary>
		/// Text Only In Navigation: Tick this box if you want this item to be just text only in the navigation menu.
		///</summary>
		[ImplementPropertyType("textOnlyInNavigation")]
		public bool TextOnlyInNavigation
		{
			get { return Umbraco.Web.PublishedContentModels.NavigationControls.GetTextOnlyInNavigation(this); }
		}

		///<summary>
		/// Umbraco Navi Hide: Tick this box if you want to hide it from the site.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.NavigationControls.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Link Target: Enter the link for this pretty link to point to
		///</summary>
		[ImplementPropertyType("linkTarget")]
		public Umbraco.Web.Models.RelatedLinks LinkTarget
		{
			get { return Umbraco.Web.PublishedContentModels.PrettyLinkControls.GetLinkTarget(this); }
		}

		///<summary>
		/// Umbraco Url Alias: Enter an alternate url in here. Please note that the values you use must be lowercase, not use a leading slash and not use a trailing ".aspx" or trailing slash. If you are adding multiple values, they must be separated with a comma.
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.UmbracoUrlAliasControls.GetUmbracoUrlAlias(this); }
		}
	}

	/// <summary>Folder</summary>
	[PublishedContentModel("Folder")]
	public partial class Folder : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "Folder";
		public new const PublishedItemType ModelItemType = PublishedItemType.Media;
#pragma warning restore 0109

		public Folder(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Folder, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Contents:
		///</summary>
		[ImplementPropertyType("contents")]
		public object Contents
		{
			get { return this.GetPropertyValue("contents"); }
		}
	}

	/// <summary>Image</summary>
	[PublishedContentModel("Image")]
	public partial class Image : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "Image";
		public new const PublishedItemType ModelItemType = PublishedItemType.Media;
#pragma warning restore 0109

		public Image(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Image, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Size
		///</summary>
		[ImplementPropertyType("umbracoBytes")]
		public string UmbracoBytes
		{
			get { return this.GetPropertyValue<string>("umbracoBytes"); }
		}

		///<summary>
		/// Type
		///</summary>
		[ImplementPropertyType("umbracoExtension")]
		public string UmbracoExtension
		{
			get { return this.GetPropertyValue<string>("umbracoExtension"); }
		}

		///<summary>
		/// Upload image
		///</summary>
		[ImplementPropertyType("umbracoFile")]
		public Umbraco.Web.Models.ImageCropDataSet UmbracoFile
		{
			get { return this.GetPropertyValue<Umbraco.Web.Models.ImageCropDataSet>("umbracoFile"); }
		}

		///<summary>
		/// Height
		///</summary>
		[ImplementPropertyType("umbracoHeight")]
		public string UmbracoHeight
		{
			get { return this.GetPropertyValue<string>("umbracoHeight"); }
		}

		///<summary>
		/// Width
		///</summary>
		[ImplementPropertyType("umbracoWidth")]
		public string UmbracoWidth
		{
			get { return this.GetPropertyValue<string>("umbracoWidth"); }
		}
	}

	/// <summary>File</summary>
	[PublishedContentModel("File")]
	public partial class File : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "File";
		public new const PublishedItemType ModelItemType = PublishedItemType.Media;
#pragma warning restore 0109

		public File(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<File, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Size
		///</summary>
		[ImplementPropertyType("umbracoBytes")]
		public string UmbracoBytes
		{
			get { return this.GetPropertyValue<string>("umbracoBytes"); }
		}

		///<summary>
		/// Type
		///</summary>
		[ImplementPropertyType("umbracoExtension")]
		public string UmbracoExtension
		{
			get { return this.GetPropertyValue<string>("umbracoExtension"); }
		}

		///<summary>
		/// Upload file
		///</summary>
		[ImplementPropertyType("umbracoFile")]
		public string UmbracoFile
		{
			get { return this.GetPropertyValue<string>("umbracoFile"); }
		}
	}

	/// <summary>Member</summary>
	[PublishedContentModel("Member")]
	public partial class Member : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "Member";
		public new const PublishedItemType ModelItemType = PublishedItemType.Member;
#pragma warning restore 0109

		public Member(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Member, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Is Approved
		///</summary>
		[ImplementPropertyType("umbracoMemberApproved")]
		public bool UmbracoMemberApproved
		{
			get { return this.GetPropertyValue<bool>("umbracoMemberApproved"); }
		}

		///<summary>
		/// Comments
		///</summary>
		[ImplementPropertyType("umbracoMemberComments")]
		public string UmbracoMemberComments
		{
			get { return this.GetPropertyValue<string>("umbracoMemberComments"); }
		}

		///<summary>
		/// Failed Password Attempts
		///</summary>
		[ImplementPropertyType("umbracoMemberFailedPasswordAttempts")]
		public string UmbracoMemberFailedPasswordAttempts
		{
			get { return this.GetPropertyValue<string>("umbracoMemberFailedPasswordAttempts"); }
		}

		///<summary>
		/// Last Lockout Date
		///</summary>
		[ImplementPropertyType("umbracoMemberLastLockoutDate")]
		public string UmbracoMemberLastLockoutDate
		{
			get { return this.GetPropertyValue<string>("umbracoMemberLastLockoutDate"); }
		}

		///<summary>
		/// Last Login Date
		///</summary>
		[ImplementPropertyType("umbracoMemberLastLogin")]
		public string UmbracoMemberLastLogin
		{
			get { return this.GetPropertyValue<string>("umbracoMemberLastLogin"); }
		}

		///<summary>
		/// Last Password Change Date
		///</summary>
		[ImplementPropertyType("umbracoMemberLastPasswordChangeDate")]
		public string UmbracoMemberLastPasswordChangeDate
		{
			get { return this.GetPropertyValue<string>("umbracoMemberLastPasswordChangeDate"); }
		}

		///<summary>
		/// Is Locked Out
		///</summary>
		[ImplementPropertyType("umbracoMemberLockedOut")]
		public bool UmbracoMemberLockedOut
		{
			get { return this.GetPropertyValue<bool>("umbracoMemberLockedOut"); }
		}

		///<summary>
		/// Password Answer
		///</summary>
		[ImplementPropertyType("umbracoMemberPasswordRetrievalAnswer")]
		public string UmbracoMemberPasswordRetrievalAnswer
		{
			get { return this.GetPropertyValue<string>("umbracoMemberPasswordRetrievalAnswer"); }
		}

		///<summary>
		/// Password Question
		///</summary>
		[ImplementPropertyType("umbracoMemberPasswordRetrievalQuestion")]
		public string UmbracoMemberPasswordRetrievalQuestion
		{
			get { return this.GetPropertyValue<string>("umbracoMemberPasswordRetrievalQuestion"); }
		}
	}

}



// EOF
